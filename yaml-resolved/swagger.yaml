openapi: 3.0.0
info:
  title: AutoRoll
  description: |
    This is a description of my AutoRoll servise, which allows you rent a car.
  termsOfService: http://swagger.io/terms/
  contact:
    name: Vira
    email: viranilla7@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
- url: http://localhost:5000/
tags:
- name: car
  description: Everything about our cars
- name: rent
  description: Access to car orders
- name: user
  description: Operations of user
- name: admin
  description: Operations of admin
- name: brand
  description: Access to brands
paths:
  /car:
    get:
      tags:
      - car
      summary: Returns all existing cars
      operationId: getCars
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
    post:
      tags:
      - car
      summary: Add a new car to the store
      operationId: addCar
      parameters:
      - name: token
        in: query
        description: The ADMIN token
        required: true
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/requestBodies/Car'
      responses:
        "405":
          description: Invalid input
      security:
      - user_auth:
        - write:user
        - read:user
  /car/{carId}/:
    get:
      tags:
      - car
      summary: Find car by ID
      description: Returns a single car
      operationId: getCarById
      parameters:
      - name: carId
        in: path
        description: ID of car to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Car'
            application/xml:
              schema:
                $ref: '#/components/schemas/Car'
        "400":
          description: Invalid ID supplied
        "404":
          description: car not found
    put:
      tags:
      - car
      summary: Update an existing car
      operationId: updateCar
      parameters:
      - name: carId
        in: path
        description: ID of car to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: token
        in: query
        description: The ADMIN token
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Car'
            application/xml:
              schema:
                $ref: '#/components/schemas/Car'
        "400":
          description: Invalid ID supplied
        "404":
          description: car not found
        "405":
          description: Invalid input
      security:
      - user_auth:
        - write:user
        - read:user
    delete:
      tags:
      - car
      summary: Deletes a car
      operationId: deleteCar
      parameters:
      - name: carId
        in: path
        description: ID of car to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: token
        in: query
        description: The ADMIN token
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Car not found
      security:
      - user_auth:
        - write:user
        - read:user
  /rent:
    get:
      tags:
      - rent
      summary: Find rent orders of user
      operationId: getOrderById
      parameters:
      - name: token
        in: query
        description: The user token
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rent'
            application/xml:
              schema:
                $ref: '#/components/schemas/Rent'
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
      security:
      - user_auth:
        - write:user
        - read:user
    post:
      tags:
      - rent
      summary: Place an order for a car
      operationId: placeOrder
      requestBody:
        description: order placed for purchasing the car
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rent'
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rent'
            application/xml:
              schema:
                $ref: '#/components/schemas/Rent'
        "400":
          description: Invalid Order
      security:
      - user_auth:
        - write:user
        - read:user
  /rent/{rentId}/:
    delete:
      tags:
      - rent
      summary: Delete rent by rentID
      operationId: deleteOrder
      parameters:
      - name: rentId
        in: path
        description: Id of rent thats u want to delete
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: token
        in: query
        description: The user token
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
      security:
      - user_auth:
        - write:user
        - read:user
  /user:
    get:
      tags:
      - user
      summary: Returns all existing users
      operationId: getuser
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
    put:
      tags:
      - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
      - name: token
        in: query
        description: The user token
        required: true
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        description: Updated user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "400":
          description: Invalid user supplied
        "404":
          description: User not found
      security:
      - user_auth:
        - write:user
        - read:user
    post:
      tags:
      - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        default:
          description: successful operation
    delete:
      tags:
      - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
      - name: token
        in: query
        description: The user token
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
      security:
      - user_auth:
        - write:user
        - read:user
  /user/login:
    post:
      tags:
      - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: string
            application/xml:
              schema:
                type: string
        "400":
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
      - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      parameters:
      - name: token
        in: query
        description: The user token
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        default:
          description: successful operation
      security:
      - user_auth:
        - write:user
        - read:user
  /user/{userId}:
    get:
      tags:
      - user
      summary: Get user by user name
      operationId: getUser
      parameters:
      - name: userId
        in: path
        description: Id of user you want to get
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "400":
          description: Invalid ID supplied
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        "404":
          description: User not found
  /brand:
    get:
      tags:
      - brand
      summary: Returns all existing brands
      operationId: getBrands
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
    post:
      tags:
      - brand
      summary: Create brand
      operationId: createBrand
      parameters:
      - name: token
        in: query
        description: The ADMIN token
        required: true
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        description: Created brand object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Brand'
        required: true
      responses:
        default:
          description: successful operation
      security:
      - user_auth:
        - write:user
        - read:user
  /brand/{brandId}:
    delete:
      tags:
      - brand
      summary: delete brand
      operationId: delBrand
      parameters:
      - name: brandId
        in: path
        description: Id of brand you want to delete
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: token
        in: query
        description: The ADMIN token
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
      - user_auth:
        - write:user
        - read:user
  /admin:
    get:
      tags:
      - admin
      summary: Returns all existing admins
      operationId: getadmins
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
    put:
      tags:
      - admin
      summary: Updated admin
      description: This can only be done by the logged in admin.
      operationId: updateAdmin
      parameters:
      - name: token
        in: query
        description: The ADMIN token
        required: true
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        description: Updated admin object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Admin'
        required: true
      responses:
        "400":
          description: Invalid admin supplied
        "404":
          description: admin not found
      security:
      - user_auth:
        - write:user
        - read:user
    post:
      tags:
      - admin
      summary: Create admin
      description: This can only be done by the logged in admin.
      operationId: createAdmin
      requestBody:
        description: Created admin object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Admin'
        required: true
      responses:
        default:
          description: successful operation
    delete:
      tags:
      - admin
      summary: Delete admin
      description: This can only be done by the logged in admin.
      operationId: deleteAdmin
      parameters:
      - name: token
        in: query
        description: The ADMIN token
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "400":
          description: Invalid username supplied
        "404":
          description: Admin not found
      security:
      - user_auth:
        - write:user
        - read:user
  /admin/login:
    post:
      tags:
      - admin
      summary: Logs admin into the system
      operationId: loginAdmin
      parameters:
      - name: username
        in: query
        description: The admin name for login
        required: true
        style: form
        explode: true
        schema:
          type: string
          example: Vikky
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the admin
              style: simple
              explode: false
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              style: simple
              explode: false
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
            application/xml:
              schema:
                type: string
        "400":
          description: Invalid username/password supplied
  /admin/logout:
    get:
      tags:
      - admin
      summary: Logs out current logged in admin session
      operationId: logoutAdmin
      responses:
        default:
          description: successful operation
      security:
      - user_auth:
        - write:user
        - read:user
  /admin/{adminId}:
    get:
      tags:
      - admin
      summary: Get admin by id
      operationId: getAdminByName
      parameters:
      - name: adminId
        in: path
        description: Id of user you want to get
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Admin'
            application/xml:
              schema:
                $ref: '#/components/schemas/Admin'
        "400":
          description: Invalid username supplied
        "404":
          description: Admin not found
components:
  schemas:
    Rent:
      required:
      - car_id
      - owner_id
      type: object
      properties:
        owner_id:
          type: integer
          format: int64
        car_id:
          type: integer
          format: int64
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
      xml:
        name: Order
    Brand:
      required:
      - name
      type: object
      properties:
        name:
          type: string
      xml:
        name: Category
    Admin:
      required:
      - email
      - password
      - username
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        password:
          type: string
      xml:
        name: User
    User:
      required:
      - email
      - password
      - username
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        password:
          type: string
      xml:
        name: User
    Car:
      required:
      - brand_id
      - model
      type: object
      properties:
        brand_id:
          type: integer
        model:
          type: string
        description:
          type: string
      xml:
        name: Car
  requestBodies:
    Car:
      description: Car object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Car'
        application/xml:
          schema:
            $ref: '#/components/schemas/Car'
      required: true
  securitySchemes:
    user_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://localhost:5144/oauth/dialog
          scopes:
            write:user: modify your account
            read:user: read your account
