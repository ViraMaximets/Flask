{
  "openapi" : "3.0.0",
  "info" : {
    "title" : "AutoRoll",
    "description" : "This is a description of my AutoRoll servise, which allows you rent a car.\n",
    "termsOfService" : "http://swagger.io/terms/",
    "contact" : {
      "name" : "Vira",
      "email" : "viranilla7@gmail.com"
    },
    "license" : {
      "name" : "Apache 2.0",
      "url" : "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version" : "1.0.0"
  },
  "servers" : [ {
    "url" : "https://virtserver.swaggerhub.com/ViraMaximets/AutoRoll/1.0.0",
    "description" : "SwaggerHub API Auto Mocking"
  } ],
  "tags" : [ {
    "name" : "car",
    "description" : "Everything about our cars"
  }, {
    "name" : "store",
    "description" : "Access to car orders"
  }, {
    "name" : "user",
    "description" : "Operations of user"
  }, {
    "name" : "admin",
    "description" : "Operations of admin"
  } ],
  "paths" : {
    "/car" : {
      "put" : {
        "tags" : [ "car" ],
        "summary" : "Update an existing car",
        "operationId" : "updateCar",
        "requestBody" : {
          "$ref" : "#/components/requestBodies/Car"
        },
        "responses" : {
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "Car not found"
          },
          "405" : {
            "description" : "Validation exception"
          }
        },
        "security" : [ {
          "carstore_auth" : [ "write:cars", "read:cars" ]
        } ]
      },
      "post" : {
        "tags" : [ "car" ],
        "summary" : "Add a new car to the store",
        "operationId" : "addCar",
        "requestBody" : {
          "$ref" : "#/components/requestBodies/Car"
        },
        "responses" : {
          "405" : {
            "description" : "Invalid input"
          }
        },
        "security" : [ {
          "carstore_auth" : [ "write:cars", "read:cars" ]
        } ]
      }
    },
    "/car/findByStatus" : {
      "get" : {
        "tags" : [ "car" ],
        "summary" : "Finds cars by status",
        "description" : "Multiple status values can be provided with comma separated strings",
        "operationId" : "findCarsByStatus",
        "parameters" : [ {
          "name" : "status",
          "in" : "query",
          "description" : "Status values that need to be considered for filter",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "default" : "available",
              "enum" : [ "available", "on a rent" ]
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Car"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "application/xml" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Car"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid status value"
          }
        },
        "security" : [ {
          "carstore_auth" : [ "write:cars", "read:cars" ]
        } ]
      }
    },
    "/car/findByTags" : {
      "get" : {
        "tags" : [ "car" ],
        "summary" : "Finds cars by tags",
        "description" : "Muliple tags can be provided with comma separated strings. Use\\ \\ tag1, tag2, tag3 for testing.",
        "operationId" : "findCarsByTags",
        "parameters" : [ {
          "name" : "tags",
          "in" : "query",
          "description" : "Tags to filter by",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Car"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "application/xml" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Car"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid tag value"
          }
        },
        "deprecated" : true,
        "security" : [ {
          "carstore_auth" : [ "write:cars", "read:cars" ]
        } ]
      }
    },
    "/car/{carId}" : {
      "get" : {
        "tags" : [ "car" ],
        "summary" : "Find car by ID",
        "description" : "Returns a single car",
        "operationId" : "getCarById",
        "parameters" : [ {
          "name" : "carId",
          "in" : "path",
          "description" : "ID of car to return",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Car"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Car"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "car not found"
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "car" ],
        "summary" : "Updates a car in the store with form data",
        "operationId" : "updateCarWithForm",
        "parameters" : [ {
          "name" : "carId",
          "in" : "path",
          "description" : "ID of car that needs to be updated",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/body"
              }
            }
          }
        },
        "responses" : {
          "405" : {
            "description" : "Invalid input"
          }
        },
        "security" : [ {
          "carstore_auth" : [ "write:cars", "read:cars" ]
        } ]
      },
      "delete" : {
        "tags" : [ "car" ],
        "summary" : "Deletes a car",
        "operationId" : "deleteCar",
        "parameters" : [ {
          "name" : "api_key",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "carId",
          "in" : "path",
          "description" : "Car id to delete",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "Car not found"
          }
        },
        "security" : [ {
          "carstore_auth" : [ "write:cars", "read:cars" ]
        } ]
      }
    },
    "/car/{carId}/uploadImage" : {
      "post" : {
        "tags" : [ "car" ],
        "summary" : "uploads an image",
        "operationId" : "uploadFile",
        "parameters" : [ {
          "name" : "carId",
          "in" : "path",
          "description" : "ID of car to update",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/octet-stream" : {
              "schema" : {
                "type" : "string",
                "format" : "binary"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "carstore_auth" : [ "write:cars", "read:cars" ]
        } ]
      }
    },
    "/store/inventory" : {
      "get" : {
        "tags" : [ "store" ],
        "summary" : "Returns car inventories by status",
        "description" : "Returns a map of status codes to quantities",
        "operationId" : "getInventory",
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "integer",
                    "format" : "int32"
                  },
                  "x-content-type" : "application/json"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ]
      }
    },
    "/store/order" : {
      "post" : {
        "tags" : [ "store" ],
        "summary" : "Place an order for a car",
        "operationId" : "placeOrder",
        "requestBody" : {
          "description" : "order placed for purchasing the car",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Order"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Order"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Order"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid Order"
          }
        }
      }
    },
    "/store/order/{orderId}" : {
      "get" : {
        "tags" : [ "store" ],
        "summary" : "Find purchase order by ID",
        "description" : "For valid response try integer IDs with value >= 1 and <= 10.\\ \\ Other values will generated exceptions",
        "operationId" : "getOrderById",
        "parameters" : [ {
          "name" : "orderId",
          "in" : "path",
          "description" : "ID of car that needs to be fetched",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maximum" : 10,
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Order"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Order"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "Order not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "store" ],
        "summary" : "Delete purchase order by ID",
        "description" : "For valid response try integer IDs with positive integer value.\\ \\ Negative or non-integer values will generate API errors",
        "operationId" : "deleteOrder",
        "parameters" : [ {
          "name" : "orderId",
          "in" : "path",
          "description" : "ID of the order that needs to be deleted",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "Order not found"
          }
        }
      }
    },
    "/user/passanger" : {
      "post" : {
        "tags" : [ "user" ],
        "summary" : "Create user",
        "description" : "This can only be done by the logged in user.",
        "operationId" : "createUser",
        "requestBody" : {
          "description" : "Created user object",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/User"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/user/passanger/createWithArray" : {
      "post" : {
        "tags" : [ "user" ],
        "summary" : "Creates list of users with given input array",
        "operationId" : "createUsersWithArrayInput",
        "requestBody" : {
          "$ref" : "#/components/requestBodies/UserArray"
        },
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/user/passanger/createWithList" : {
      "post" : {
        "tags" : [ "user" ],
        "summary" : "Creates list of users with given input array",
        "operationId" : "createUsersWithListInput",
        "requestBody" : {
          "$ref" : "#/components/requestBodies/UserArray"
        },
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/user/passanger/login" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "Logs user into the system",
        "operationId" : "loginUser",
        "parameters" : [ {
          "name" : "username",
          "in" : "query",
          "description" : "The user name for login",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "example" : "Vikky"
          }
        }, {
          "name" : "password",
          "in" : "query",
          "description" : "The password for login in clear text",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : {
              "X-Rate-Limit" : {
                "description" : "calls per hour allowed by the user",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "integer",
                  "format" : "int32"
                }
              },
              "X-Expires-After" : {
                "description" : "date in UTC when token expires",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string",
                  "format" : "date-time"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "x-content-type" : "application/json"
                }
              },
              "application/xml" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid username/password supplied"
          }
        }
      }
    },
    "/user/passanger/logout" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "Logs out current logged in user session",
        "operationId" : "logoutUser",
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/user/passanger/{username}" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "Get user by user name",
        "operationId" : "getUserByName",
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "description" : "The name that needs to be fetched. Use user1 for testing.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "Vikky"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid username supplied"
          },
          "404" : {
            "description" : "User not found"
          }
        }
      },
      "put" : {
        "tags" : [ "user" ],
        "summary" : "Updated user",
        "description" : "This can only be done by the logged in user.",
        "operationId" : "updateUser",
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "description" : "name that need to be updated",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "Vikky"
          }
        } ],
        "requestBody" : {
          "description" : "Updated user object",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/User"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Invalid user supplied"
          },
          "404" : {
            "description" : "User not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "user" ],
        "summary" : "Delete user",
        "description" : "This can only be done by the logged in user.",
        "operationId" : "deleteUser",
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "description" : "The name that needs to be deleted",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "Vikky"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Invalid username supplied"
          },
          "404" : {
            "description" : "User not found"
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "Order" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "carId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "shipDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "status" : {
            "type" : "string",
            "description" : "Order Status",
            "enum" : [ "asked", "approved" ]
          }
        },
        "example" : {
          "id" : 0,
          "shipDate" : "2000-01-23T04:56:07.000+00:00",
          "carId" : 6,
          "status" : "asked"
        },
        "xml" : {
          "name" : "Order"
        }
      },
      "Brand" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "name" : {
            "type" : "string"
          }
        },
        "example" : {
          "name" : "name",
          "id" : 6
        },
        "xml" : {
          "name" : "Category"
        }
      },
      "User" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "username" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "password" : {
            "type" : "string"
          },
          "phone" : {
            "type" : "string"
          },
          "userStatus" : {
            "type" : "integer",
            "description" : "User Status",
            "format" : "int32"
          }
        },
        "example" : {
          "password" : "password",
          "userStatus" : 6,
          "phone" : "phone",
          "id" : 0,
          "email" : "email",
          "username" : "username"
        },
        "xml" : {
          "name" : "User"
        }
      },
      "Tag" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "name" : {
            "type" : "string"
          }
        },
        "example" : {
          "name" : "name",
          "id" : 1
        },
        "xml" : {
          "name" : "Tag"
        }
      },
      "Car" : {
        "required" : [ "id", "name", "photoUrls" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "brand" : {
            "$ref" : "#/components/schemas/Brand"
          },
          "name" : {
            "type" : "string",
            "example" : "doggie"
          },
          "photoUrls" : {
            "type" : "array",
            "xml" : {
              "name" : "photoUrl",
              "wrapped" : true
            },
            "items" : {
              "type" : "string"
            }
          },
          "tags" : {
            "type" : "array",
            "xml" : {
              "name" : "tag",
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/Tag"
            }
          },
          "status" : {
            "type" : "string",
            "description" : "pet status in the store",
            "enum" : [ "available", "pending", "sold" ]
          }
        },
        "example" : {
          "photoUrls" : [ "photoUrls", "photoUrls" ],
          "name" : "doggie",
          "id" : 0,
          "brand" : {
            "name" : "name",
            "id" : 6
          },
          "tags" : [ {
            "name" : "name",
            "id" : 1
          }, {
            "name" : "name",
            "id" : 1
          } ],
          "status" : "available"
        },
        "xml" : {
          "name" : "Pet"
        }
      },
      "ApiResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "format" : "int32"
          },
          "type" : {
            "type" : "string"
          },
          "message" : {
            "type" : "string"
          }
        },
        "example" : {
          "code" : 0,
          "type" : "type",
          "message" : "message"
        }
      },
      "body" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "Updated name of the car"
          },
          "status" : {
            "type" : "string",
            "description" : "Updated status of the car"
          }
        }
      }
    },
    "requestBodies" : {
      "Car" : {
        "description" : "Car object that needs to be added to the store",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Car"
            }
          },
          "application/xml" : {
            "schema" : {
              "$ref" : "#/components/schemas/Car"
            }
          }
        },
        "required" : true
      },
      "UserArray" : {
        "description" : "List of user object",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/User"
              }
            }
          }
        },
        "required" : true
      }
    },
    "securitySchemes" : {
      "carstore_auth" : {
        "type" : "oauth2",
        "flows" : {
          "implicit" : {
            "authorizationUrl" : "http://autoroll.swagger.io/oauth/dialog",
            "scopes" : {
              "write:cars" : "modify cars in your account",
              "read:cars" : "read your cars"
            }
          }
        }
      },
      "api_key" : {
        "type" : "apiKey",
        "name" : "api_key",
        "in" : "header"
      }
    }
  }
}
